[project]
name = "wildlife-streaming-e2e"
version = "0.1.0"
description = "Project demonstrating a streaming end-to-end application for wild animals collar tracking system"
readme = "README.md"
requires-python = ">=3.11,<3.13"
dependencies = [
    "dagster>=1.11.2",
    "dagster-dbt>=0.27.2",
    "dagster-webserver>=1.11.2",
    "dbt-clickhouse>=1.9.2",
    "faker>=37.4.0",
    "fastapi>=0.115.13",
    "mypy>=1.16.1",
    "numpy>=2.3.1",
    "pandas>=2.3.0",
    "plotly>=6.1.2",
    "pre-commit>=4.2.0",
    "psycopg2-binary>=2.9.10",
    "pydantic>=2.11.7",
    "pydantic-settings>=2.10.1",
    "pydeck>=0.9.1",
    "rich>=14.0.0",
    "ruff>=0.12.0",
    "sqlalchemy>=2.0.41",
    "sqlfluff-templater-dbt>=3.4.2",
    "streamlit>=1.46.0",
    "types-requests>=2.32.4.20250611",
    "uvicorn>=0.34.3",
]

[tool.setuptools.packages.find]
where = ["."]

[tool.black]
target-version = ["py313"]
include = '\.pyi?$'

[tool.ruff]
fix = true
output-format = "github"
target-version = "py313"

lint.ignore = [
    # Line too long (E501)
    # 1. black does not format comments
    #    https://black.readthedocs.io/en/stable/the_black_code_style/current_style.html#comments
    # 2. long links in doc strings are an issue
    "E501",
    # flake8-builtins
    # the likelihood of running into an issue when shadowing a buildin
    # with a class attribute is very low
    "A003",
    # Limiting the length of error messages isn't particularly useful
    "TRY003",
    "TRY002",
    "G004",
]
lint.select = [
    "A",   # flake8-builtin"
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "C90", # mccabe
    "E",   # flake8
    "ERA", # eradicate
    "F",   # Pyflakes
    "G",   # flake8-logging-format
    "I",   # isort
    "N",   # pep8-naming
    "RUF", # ruff
    "UP",  # pyupgrade
    "TRY", # tryceratops
    "T10", # flake8-debugger
]

[tool.ruff.lint.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = true

[tool.ruff.lint.mccabe]
max-complexity = 15

[tool.ruff.lint.pep8-naming]
classmethod-decorators = [
    "classmethod",
    "pydantic.validator",
    "pydantic.root_validator",
]

[tool.mypy]
plugins = ["pydantic.mypy"]
strict = true
show_error_codes = true
ignore_missing_imports = true
disallow_any_unimported = false


[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.dagster]
module_name = "orchestrator.definitions"
