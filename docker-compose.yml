services:
  db:
    container_name: backend-db
    image: postgres:15
    restart: always
    command:
      - postgres
      - -c
      - wal_level=logical
      - -c
      - max_wal_senders=4
      - -c
      - max_replication_slots=4
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - backend-db-data:/var/lib/postgresql/data
      - ./backend/scripts/init-debezium-user.sh:/docker-entrypoint-initdb.d/init-debezium-user.sh:ro
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 2s
      retries: 3
      start_period: 5s
      timeout: 5s

  adminer:
    container_name: adminer
    image: adminer:latest
    restart: always
    ports:
      - "8080:8080"
    environment:
      # Tell Adminer which server to connect to by default
      ADMINER_DEFAULT_SERVER: db
    depends_on:
      - db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 2s
      retries: 3
      start_period: 5s
      timeout: 5s

  backend:
    container_name: backend
    build:
      context: .
      dockerfile: backend/Dockerfile.backend
    command:
      - python
      - -m
      - uvicorn
      - backend.server.main:app
      - --host
      - ${BACKEND_HOST}
      - --port
      - ${BACKEND_PORT}
      - --reload
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${BACKEND_PORT}/health"]
      interval: 2s
      retries: 3
      start_period: 5s
      timeout: 5s

  redpanda:
    container_name: redpanda-broker
    image: redpandadata/redpanda:latest
    restart: always
    ports:
      - "9092:9092" # Kafka API port
      - "9644:9644" # Admin API port
    healthcheck:
      test: ["CMD-SHELL", "curl -fs http://localhost:9644/v1/status/ready || exit 1"]
      interval: 2s
      retries: 3
      start_period: 5s
      timeout: 5s
    command:
      - redpanda
      - start
      - --overprovisioned
      - --smp
      - "1"
      - --memory
      - "1G"
      - --reserve-memory
      - "0M"
      - --node-id
      - "0"
      - --check=false
      - --kafka-addr
      - "PLAINTEXT://0.0.0.0:9092"
      - --advertise-kafka-addr
      - "PLAINTEXT://redpanda:9092"

  debezium:
    container_name: debezium
    build:
      context: .
      dockerfile: kafka/Dockerfile.debezium
    restart: always
    env_file:
      - .env
    ports:
      - "8083:8083" # Debezium REST API port
    environment:
      - BOOTSTRAP_SERVERS=redpanda:9092
      - GROUP_ID=debezium
      - CONFIG_STORAGE_TOPIC=debezium_config
      - OFFSET_STORAGE_TOPIC=debezium_offsets
      - STATUS_STORAGE_TOPIC=debezium_status
      - KEY_CONVERTER=org.apache.kafka.connect.json.JsonConverter
      - VALUE_CONVERTER=org.apache.kafka.connect.json.JsonConverter
      - CONNECT_REST_ADVERTISED_HOST_NAME=debezium
      - CONNECT_REST_PORT=8083
      - CONNECT_PLUGIN_PATHS=/kafka/connect
    healthcheck:
      test:
        - "CMD"
        - curl
        - -f
        - http://localhost:8083/
      interval: 2s
      retries: 3
      start_period: 5s
      timeout: 5s
    depends_on:
      redpanda:
        condition: service_healthy


  redpanda-console:
    container_name: redpanda-console
    image: docker.redpanda.com/redpandadata/console:latest
    ports:
      - "8082:8080"
    environment:
      - KAFKA_BROKERS=redpanda:9092
      - SCHEMA_REGISTRY_ENABLED=false
    depends_on:
      - debezium
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 2s
      retries: 3
      start_period: 5s
      timeout: 5s



  debezium-ui:
    container_name: debezium-ui
    image: debezium/debezium-ui:2.1
    ports:
      - "8081:8080"
    environment:
      KAFKA_CONNECT_URIS: http://debezium:8083
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 2s
      retries: 3
      start_period: 5s
      timeout: 5s
    depends_on:
      - debezium
  clickhouse:
    container_name: clickhouse
    image: clickhouse/clickhouse-server:latest
    restart: always
    ports:
      - "8123:8123" # HTTP port
      - "9000:9000" # Native port
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    volumes:
      - clickhouse-data:/var/lib/clickhouse
      - ./clickhouse/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8123/ping"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    depends_on:
      db:
        condition: service_healthy

  kafka-connector-registry:
    container_name: kafka-connector-registry
    image: alpine:latest
    env_file:
      - .env
    volumes:
      - ./kafka/scripts/register-connector.sh:/kafka/register-connector.sh:ro
      - ./kafka/scripts/register-clickhouse-sink.sh:/kafka/register-clickhouse-sink.sh:ro
      - ./kafka/templates/kafka-connector.template.json:/kafka/kafka-connector-template.json:ro
      - ./kafka/templates/clickhouse-sink.template.json:/kafka/clickhouse-sink.template.json:ro
    entrypoint:
      - /bin/sh
      - -c
      - "/kafka/register-connector.sh && /kafka/register-clickhouse-sink.sh"
    depends_on:
      debezium:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
      redpanda-console:
        condition: service_healthy
      debezium-ui:
        condition: service_healthy

volumes:
  backend-db-data:
  clickhouse-data:
