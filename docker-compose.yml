services:
  db:
    image: postgres:15
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    command:
      - postgres
      - -c
      - wal_level=logical
      - -c
      - max_wal_senders=4
      - -c
      - max_replication_slots=4
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - backend-db-data:/var/lib/postgresql/data
      - ./scripts/init-debezium-user.sh:/docker-entrypoint-initdb.d/init-debezium-user.sh:ro
    env_file:
      - .env

  adminer:
    image: adminer:latest
    restart: always
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      # Tell Adminer which server to connect to by default
      ADMINER_DEFAULT_SERVER: db

  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile.backend
    command:
      - python
      - -m
      - uvicorn
      - backend.server.main:app
      - --host
      - ${BACKEND_HOST}
      - --port
      - ${BACKEND_PORT}
      - --reload
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
    depends_on:
      db:
        condition: service_healthy

  redpanda:
    image: redpandadata/redpanda:latest
    restart: always
    ports:
      - "9092:9092" # Kafka API port
      - "9644:9644" # Admin API port
    healthcheck:
      test: ["CMD-SHELL", "curl -fs http://localhost:9644/v1/status/ready || exit 1"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    command:
      - redpanda
      - start
      - --overprovisioned
      - --smp
      - "1"
      - --memory
      - "1G"
      - --reserve-memory
      - "0M"
      - --node-id
      - "0"
      - --check=false
      - --kafka-addr
      - "PLAINTEXT://0.0.0.0:9092"
      - --advertise-kafka-addr
      - "PLAINTEXT://redpanda:9092"
    depends_on:
      db:
        condition: service_healthy

  debezium:
    image: debezium/connect:2.6
    restart: always
    env_file:
      - .env
    ports:
      - "8083:8083" # Debezium REST API port
    environment:
      - BOOTSTRAP_SERVERS=redpanda:9092
      - GROUP_ID=debezium
      - CONFIG_STORAGE_TOPIC=debezium_config
      - OFFSET_STORAGE_TOPIC=debezium_offsets
      - STATUS_STORAGE_TOPIC=debezium_status
      - KEY_CONVERTER=org.apache.kafka.connect.json.JsonConverter
      - VALUE_CONVERTER=org.apache.kafka.connect.json.JsonConverter
      - CONNECT_REST_ADVERTISED_HOST_NAME=debezium
      - CONNECT_REST_PORT=8083
      - CONNECT_PLUGIN_PATHS=/kafka/connect
    healthcheck:
      test:
        - "CMD"
        - curl
        - -f
        - http://localhost:8083/
      interval: 10s
      retries: 5
    volumes:
      - ./scripts/register-connector.sh:/kafka/register-connector.sh:ro
      - ./backend/kafka-connector.template.json:/kafka/connector-template.json:ro
    depends_on:
      redpanda:
        condition: service_healthy
      db:
        condition: service_healthy

  register-connector:
    image: alpine:latest
    depends_on:
      debezium:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - ./scripts/register-connector.sh:/kafka/register-connector.sh:ro
      - ./scripts/kafka-connector.template.json:/kafka/connector-template.json:ro
    entrypoint: ["/bin/sh", "-c", "/kafka/register-connector.sh"]

  debezium-ui:
    image: debezium/debezium-ui:2.1
    ports:
      - "8081:8080"
    environment:
      KAFKA_CONNECT_URIS: http://debezium:8083
    depends_on:
      - debezium

  redpanda-console:
    image: docker.redpanda.com/redpandadata/console:latest
    ports:
      - "8082:8080"
    environment:
      - KAFKA_BROKERS=redpanda:9092
      - SCHEMA_REGISTRY_ENABLED=false
    depends_on:
      redpanda:
        condition: service_healthy
      debezium:
        condition: service_healthy

volumes:
  backend-db-data:
