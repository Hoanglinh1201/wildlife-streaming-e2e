# Use a Python image with uv pre-installed
FROM python:3.11-slim

COPY --from=ghcr.io/astral-sh/uv:0.8.0 /uv /uvx /bin/

# Install the project into `/app`
WORKDIR /app

# Enable bytecode compilation
ENV UV_COMPILE_BYTECODE=1

# Copy from the cache instead of linking since it's a mounted volume
ENV UV_LINK_MODE=copy

# Install the project's dependencies using the lockfile and settings
COPY orchestrator/pyproject.toml orchestrator/uv.lock ./

# Then, add the rest of the project source code and install it
# Installing separately from its dependencies allows optimal layer caching
COPY orchestrator/ ./orchestrator

RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --locked --no-dev

# Place executables in the environment at the front of the path
ENV PATH="/app/.venv/bin:$PATH"

# Reset the entrypoint, don't invoke `uv`
ENTRYPOINT []

EXPOSE 3000

CMD ["dagster", "dev", "--host", "0.0.0.0", "--port", "3000"]
